package main

import (
	"testing"

	"ariga.io/atlas/sql/schema"
	"github.com/stretchr/testify/assert"
)

func Test_generate(t *testing.T) {
	t.Parallel()

	patterns := []struct {
		name string
		sc   schema.Schema
		in   input
		out  string
	}{
		// TODO: add more pattern
		{
			name: "success",
			sc: schema.Schema{
				Tables: []*schema.Table{
					schema.NewTable("users").AddColumns(
						schema.NewStringColumn("id", "string"),
						schema.NewIntColumn("created_at", "int"),
						schema.NewIntColumn("updated_at", "int"),
					),
				},
			},
			in: input{
				hclPath: "input.hcl",
				outPath: "output.go",
				pkg:     "main",
				tag:     "db",
			},
			out: `// Code generated by github.com/ucpr/atlas-hcl-gen-go. DO NOT EDIT.
// atlas-hcl-gen-go:
// source: input.hcl

package main

type Users struct {
	Id        string ` + "`" + `db:"id"` + "`" + `
	CreatedAt int    ` + "`" + `db:"created_at"` + "`" + `
	UpdatedAt int    ` + "`" + `db:"updated_at"` + "`" + `
}
`,
		},
	}

	for _, tt := range patterns {
		tt := tt
		t.Run(tt.name, func(t *testing.T) {
			t.Parallel()

			got, err := generate(tt.sc, tt.in)
			assert.NoError(t, err)
			assert.Equal(t, tt.out, string(got))
		})
	}
}

func Test_toCamelCase(t *testing.T) {
	t.Parallel()

	patterns := []struct {
		name string
		in   string
		out  string
	}{
		{
			name: "snake case",
			in:   "created_at",
			out:  "CreatedAt",
		},
		{
			name: "camel case",
			in:   "CreatedAt",
			out:  "CreatedAt",
		},
		{
			name: "snake case and camel case",
			in:   "created_At",
			out:  "CreatedAt",
		},
	}

	for _, tt := range patterns {
		tt := tt
		t.Run(tt.name, func(t *testing.T) {
			t.Parallel()

			got := toCamelCase(tt.in)
			assert.Equal(t, tt.out, got)
		})
	}
}
